from scipy.sparse import csr_matrix
from scipy.sparse.linalg import svds
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# 1. Content-Based Filtering (Similar to previous response)
relevant_cols = ['brand', 'cat_0', 'cat_1', 'cat_2']
sample_df['content'] = sample_df[relevant_cols].apply(lambda x: ' '.join(x), axis=1)

tfidf = TfidfVectorizer()
tfidf_matrix = tfidf.fit_transform(sample_df['content'])
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# 2. Collaborative Filtering (Similar to previous response)
user_item_matrix = sample_df.pivot_table(index='user_id', columns='product_id', values='target', fill_value=0)
user_item_sparse = csr_matrix(user_item_matrix.values)

num_factors = 10
U, sigma, Vt = svds(user_item_sparse, k=num_factors)
sigma = np.diag(sigma)
predicted_ratings = np.dot(np.dot(U, sigma), Vt)
predicted_ratings = pd.DataFrame(predicted_ratings, index=user_item_matrix.index, columns=user_item_matrix.columns)

# 3. Hybrid Recommendation Function
def recommend_items_hybrid(user_id, df=sample_df, num_recs=5, content_weight=0.5, collab_weight=0.5):
    user_interactions = sample_df[sample_df['user_id'] == user_id]['product_id']
    
    # Content-based recommendations
    content_recs = []
    for item_id in user_interactions:
        sim_scores = list(enumerate(cosine_sim[df[df['product_id'] == item_id].index[0]]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        sim_scores = sim_scores[1:num_recs+1]  # Exclude the item itself
        content_recs.extend([(df['product_id'][i], s) for i, s in sim_scores])
    
    # Collaborative filtering recommendations
    collab_recs = predicted_ratings.loc[user_id].sort_values(ascending=False)[:num_recs].index.tolist()

    # Combine and score recommendations
    all_recs = content_recs + [(rec, 1.0) for rec in collab_recs] # Assign collab score of 1.0
    scored_recs = {}
    for item, score in all_recs:
        scored_recs[item] = scored_recs.get(item, 0) + score * content_weight  # Weighted average
        if item in collab_recs:  
            scored_recs[item] += collab_weight  # Add extra weight for collaborative filtering

    # Sort by score and get product details
    top_recs = sorted(scored_recs.items(), key=lambda x: x[1], reverse=True)[:num_recs]
    product_details = sample_df[sample_df['product_id'].isin([rec[0] for rec in top_recs])][['product_id', 'brand', 'price', 'cat_0', 'cat_1', 'cat_2']].to_dict(orient='records')

    return product_details

# 4. User Interaction (Example with Top 5 Limit)
user_id = input("Enter user ID: ")
if user_id in user_item_matrix.index:
    recommendations = recommend_items(user_id)  
    
    # Print only top 5 recommendations
    num_recommendations_to_print = min(5, len(recommendations)) 
    
    if num_recommendations_to_print > 0:
        print(f"\nTop {num_recommendations_to_print} Recommendations for User {user_id}:")
        for i, rec in enumerate(recommendations[:num_recommendations_to_print]):
            print(f"\nRecommendation {i+1}:")
            print(f"  Product ID: {rec['product_id']}")
            print(f"  Brand: {rec['brand']}")
            print(f"  Price: {rec['price']}")
            print(f"  Category 0: {rec['cat_0']}")
            print(f"  Category 1: {rec['cat_1']}")
            print(f"  Category 2: {rec['cat_2']}")
    else:
        print(f"No recommendations found for user {user_id}.")
else:
    print(f"User ID {user_id} not found in the dataset.")
